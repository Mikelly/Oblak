@using Oblak.Models.Api;
@using Oblak.Models.EFI;

@{
    ViewBag.Title = "Prijave gostiju";
    Layout = "~/Views/Shared/_LayoutINV.cshtml";
    var nautical = (bool)ViewBag.Nautical;
}

<script type="text/javascript">
    // $(document).ready(function () {
    //     $("#btnNewGroup").click(function () {
    //         $("#wndNewGroup").data("kendoWindow").center().open();
    //     });

    //     $("#btnSubmitNewGroup").click(function () {
    //         // Gather input values
    //         var checkInDate = $("#checkInDate").data("kendoDatePicker").value();
    //         var checkOutDate = $("#checkOutDate").data("kendoDatePicker").value();
    //         var email = $("#email").val();

    //         // Create GroupDto object
    //         var groupDto = {
    //             CheckIn: checkInDate,
    //             CheckOut: checkOutDate,
    //             Email: email
    //         };

    //         // Call the controller method to save the new group
    //         saveNewGroup(groupDto);
    //     });

    //     $(document).ready(function () {
    //         var propertyDropdown = $("#propertyDropdown").data("kendoDropDownList");
    //         var propertyUnitDropdown = $("#propertyUnitDropdown").data("kendoDropDownList");

    //         propertyDropdown.bind("change", function () {
    //             var propertyId = this.value();
    //             if (propertyId) {
    //                 // Fetch PropertyUnits based on the selected Property
    //                 $.ajax({
    //                     url: '@Url.Action("GetPropertyUnits", "Group")',
    //                     type: 'GET',
    //                     data: { propertyId: propertyId },
    //                     success: function (data) {
    //                         propertyUnitDropdown.setDataSource(new kendo.data.DataSource({ data: data }));
    //                         propertyUnitDropdown.enable(true);
    //                     }
    //                 });
    //             } else {
    //                 // Reset and disable PropertyUnit dropdown if no Property is selected
    //                 propertyUnitDropdown.value("");
    //                 propertyUnitDropdown.enable(false);
    //             }
    //         });
    //     });
    // });


    function newGroup() {
        $("#wndNewGroup").data("kendoWindow").center().open();
    }

    function submitNewGroup() {

        var checkInDate = $("#checkInDate").data("kendoDatePicker").value();
        var checkOutDate = $("#checkOutDate").data("kendoDatePicker").value();
        var email = $("#email").val();

        // Create GroupDto object
        var groupDto = {
            CheckIn: checkInDate,
            CheckOut: checkOutDate,
            Email: email
        };

        // Call the controller method to save the new group
        saveNewGroup(groupDto);

    }


    function saveNewGroup(groupDto) {
        // Show loading indicator if needed
        // kendo.ui.progress($("#wndNewGroup"), true);

        // Get selected dates from datepicker inputs
        var checkInDate = $("#checkInDate").data("kendoDatePicker").value();
        var checkOutDate = $("#checkOutDate").data("kendoDatePicker").value();

        // Convert the dates to a format that can be safely sent to the server
        var formattedCheckInDate = kendo.toString(checkInDate, "yyyy-MM-ddTHH:mm:ss");
        var formattedCheckOutDate = kendo.toString(checkOutDate, "yyyy-MM-ddTHH:mm:ss");

        // Get selected Property and PropertyUnit values from dropdowns
        var propertyId = $("#PropertyId").data("kendoMultiColumnComboBox").value();
        var vesselId = null;
        if ($("#VesselId").length > 0) vesselId = $("#VesselId").data("kendoMultiColumnComboBox").value();
        var nauticalLegalEntityId = null;
        if ($("#NauticalLegalEntityId") > 0) nauticalLegalEntityId = $("#NauticalLegalEntityId").data("kendoMultiColumnComboBox").value();
        var resTaxPaymentTypeId = $("#ResTaxPaymentTypeId").data("kendoDropDownList").value();

        // Add dates, PropertyId, and PropertyUnitId to the groupDto
        groupDto.CheckIn = formattedCheckInDate;
        groupDto.CheckOut = formattedCheckOutDate;
        groupDto.PropertyId = propertyId;     
        groupDto.VesselId = vesselId
        groupDto.NauticalLegalEntityId = nauticalLegalEntityId;
        groupDto.ResTaxPaymentTypeId = resTaxPaymentTypeId;

        $.ajax({
            url: '@Url.Action("Create", "Group")',
            type: 'POST',
            data: {
                groupDto: groupDto
            },
            success: function (data) {
                // Handle success if needed
                console.log(data);

                debugger;

                window.location = `/persons?groupid=${data}`;

                // Close the window or perform any other actions
                //$("#wndNewGroup").data("kendoWindow").close();

                // Refresh the grid after creating a new group (if needed)
                //$('#groupGrid').data('kendoGrid').dataSource.read();
            },
            error: function (error) {
                // Handle error if needed
                console.error(error);

                // Display an error message to the user, adjust as needed
                alert("Došlo je do greške.");
            },
            complete: function () {
                // Hide loading indicator if needed
                // kendo.ui.progress($("#wndNewGroup"), false);
            }
        });
    }

    function sendLink(e) {
        $.ajax({
            url: '@Url.Content("~/rbgrp/sendlink")',
            type: 'GET',
            success: function (data, status, xhr) {
                $('#wndSendLink').data('kendoWindow').content(data);
                $('#wndSendLink').data('kendoWindow').center();
                $('#wndSendLink').data('kendoWindow').open();
            }
        });
    }

    function deleteGroup(e) {
        var grid = $('#groupGrid').data('kendoGrid');
        var item = grid.dataItem(grid.select());

        if (item == null) {
            Swal.fire({ icon: 'error', title: 'Morate odabrati prijavu', confirmButtonText: `U redu` });
        } else {
            // Confirm the delete action
            Swal.fire({
                title: 'Da li ste sigurni?',
                text: 'Ova radnja je nepovratna!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Da, obriši!',
                cancelButtonText: 'Odustani'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Proceed with the delete action
                    $.ajax({
                        url: '@Url.Content("~/Group/DeleteGroup/")',
                        data: { groupId: item.Id },
                        type: 'GET',
                        success: function (data, status, xhr) {
                            if (data.error != "") {
                                Swal.fire({ icon: 'error', title: data.error, confirmButtonText: `U redu` });
                            }
                            if (data.info != "") {
                                // Refresh the grid after deleting the group
                                grid.dataSource.read();
                                Swal.fire({ icon: 'info', title: data.info, confirmButtonText: `U redu` });
                            }
                        },
                        error: function () {
                            Swal.fire({ icon: 'error', title: 'Došlo je do greške prilikom brisanja grupe.', confirmButtonText: `U redu` });
                        }
                    });
                }
            });
        }
    }


    function showGroup(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        event.stopPropagation();

        var grid = $('#groupGrid').data('kendoGrid');
        var item = grid.dataItem(grid.select());

        if (item == null) {
            Swal.fire({ icon: 'error', title: 'Morate odabrati prijavu', confirmButtonText: `U redu` });
        } else {
            window.location = '/persons?groupId=' + item.Id;
        }
    }

    function propertyChanged(e) {
        var val = this.value();            
        if (val == 0) { 
            // Show vessels and legalentities
        }
    }

    function nauticalLeChanged(e) {

        var item = this.dataItem();

        if (item) {
            $.ajax({
                url: `/deferred?legalentity=${item.Id}`,                
                type: 'GET',
                success: function (data, status, xhr) {
                    if (data.allowed == false) {
                        var dropdownlist = $("#ResTaxPaymentTypeId").data("kendoDropDownList");                        
                        var dataSource = dropdownlist.dataSource;

                        var itemToRemove = dataSource.data().find(function (item) {
                            return item.Value === data.Id.toString();
                        });
                        
                        if (itemToRemove) {
                            dataSource.remove(itemToRemove);
                        }
                    }
                },
                error: function () {
                    Swal.fire({ icon: 'error', title: 'Došlo je do greške!', confirmButtonText: `U redu` });
                }
            });
        } else {
            console.log("No item selected.");
        }
    }


    function vesselChanged(e) {

        var item = this.dataItem();

        var nautical = $("#NauticalLegalEntityId").data("kendoMultiColumnComboBox")

        nautical.value(item.LegalEntityId);
        nautical.text(item.LegalEntityName);
    }


    function periodSelect(e) {
        var idx = e.indices;
        if (idx == undefined) idx = 0;
        var period = idx == 0 ? 'D' : idx == 1 ? 'W' : idx == 2 ? 'M' : idx == 3 ? 'Y' : 'C';

        var cod = '';
        var cdo = '';

        if (period == 'C') {
            $('#dtmOd').data('kendoDatePicker').enable(true);
            $('#dtmDo').data('kendoDatePicker').enable(true);
            var codval = $('#dtmOd').data('kendoDatePicker').value();
            if (codval != null) cod = kendo.toString(codval, 'dd.MM.yyyy');
            var cdoval = $('#dtmDo').data('kendoDatePicker').value();
            if (cdoval != null) cdo = kendo.toString(cdoval, 'dd.MM.yyyy');
        }
        else {
            $('#dtmOd').data('kendoDatePicker').enable(false);
            $('#dtmOd').data('kendoDatePicker').value(null);
            $('#dtmDo').data('kendoDatePicker').enable(false);
            $('#dtmDo').data('kendoDatePicker').value(null);
        }

        debugger;

        var grid = $('#mnePersonGrid').data('kendoGrid');
        grid.dataSource.transport.options.read.url = `/Person/ReadMnePersons?groupId=@ViewBag.Group&period=${period}&dtmod=${cod}&dtmdo=${cdo}`;
        grid.dataSource.read();
    }

    function readOptionSelect(e) {
    }


    function dtmChanged() {
        //$('#grpPeriod').data('kendoButtonGroup').trigger('select');
        periodSelect({ indices: 4 });
    }


</script>

<style type="text/css">

    #grpReadOption {
        display: flex;
        flex-direction: column;
    }

    #grpReadOption .k-button {
        width: 100%;
    }

    #grpReadOption .k-button:not(:last-child) {
        margin-bottom: 5px;
    }

</style>

<div style="display:flex; margin-left:15px; margin-top:25px; margin-right:15px;">

    @(Html.Kendo().Button().Name("btnNewGroup")
        .HtmlAttributes(new { type = "button", onclick = "newGroup()", style = "height:95px; width:95px; margin-right:10px; cursor:pointer;" })
        .Content(@"<div style='width:100%;height:100%;text-align:center; align-items:center;'>
                <img style='width:50px;height:50px;text-align:center;display:block;margin-left:auto;margin-right:auto;' src='/Content/Icons/user_group_new.png'/>
                <div style='font-weight:bold;display:block;position:relative;top:5px;line-height:110%;font-size:90%'>NOVA PRIJAVA<br/>GOSTIJU<div>
                </div>"))

    @(Html.Kendo().Button().Name("btnOpenGuest")
        .HtmlAttributes(new { type = "button", onclick = "showGroup(event)", style = "height:95px; width:95px; margin-right:10px; cursor:pointer;" })
        .Content(@"<div style='width:100%;height:100%;text-align:center; align-items:center;'>
                <img style='width:50px;height:50px;text-align:center;display:block;margin-left:auto;margin-right:auto;' src='/Content/Icons/view_glass.png'/>
                <div style='font-weight:bold;display:block;position:relative;top:5px;line-height:110%;font-size:90%'>PRIKAŽI<br/>PRIJAVU<div>
                </div>"))

    @(Html.Kendo().Button().Name("btnDeleteGuest")
        .HtmlAttributes(new { type = "button", onclick = "deleteGroup(event)", style = "height:95px; width:95px; margin-right:10px; cursor:pointer;" })
        .Content(@"<div style='width:100%;height:100%;text-align:center; align-items:center;'>
                <img style='width:50px;height:50px;text-align:center;display:block;margin-left:auto;margin-right:auto;' src='/Content/Icons/remove.png'/>
                <div style='font-weight:bold;display:block;position:relative;top:5px;line-height:110%;font-size:90%'>OBRIŠI<br/>PRIJAVU<div>
                </div>"))


        <div style="flex-basis:390px;position:relative;top:-2px; margin-left:35px;">
            Odaberite period:
            @(Html.Kendo().ButtonGroup().HtmlAttributes(new { style = "height:30px;" })
                .Name("grpPeriod")
                .Items(t =>
                {
                    t.Add().Text("Dan").Selected(true);
                    t.Add().Text("Nedelja");
                    t.Add().Text("Mjesec");
                    t.Add().Text("Godina");
                    t.Add().Text("Proizvoljni period");
                }).Events(e => e.Select("periodSelect"))
                )

            <div id="dtmPeriod" style="width:390px; vertical-align:top;">
                <div style="margin-bottom:10px; margin-top:3px; display:inline-block; width:175px;">
                    Od datuma:<br />
                    @Html.Kendo().DatePicker().Name("dtmOd").HtmlAttributes(new { style = "width:calc(100% - 0px);" }).Events(e => e.Change("dtmChanged")).Enable(false)
                </div>
                <div style="display:inline-block; margin-left:8px; width:175px;">
                    Do datuma:<br />
                    @Html.Kendo().DatePicker().Name("dtmDo").HtmlAttributes(new { style = "width:calc(100% - 0px);" }).Events(e => e.Change("dtmChanged")).Enable(false)
                </div>
            </div>
        </div>

@*         <div style="width:150px;position:relative;top:-2px; margin-left:15px; padding-bottom:5px;">
            Odaberite prijave:
            @(Html.Kendo().ButtonGroup().HtmlAttributes(new { id = "grpReadOption", style = "height:40px;" })
                .Name("grpReadOption")
                .Items(t =>
                {
                    t.Add().Text("Samo moje prijave").Selected(true);
                    t.Add().Text("Sve prijave");                    
                }).Events(e => e.Select("readOptionSelect"))
                )
        </div> *@

</div>

<div style="position:absolute; top:130px; bottom: 15px; left: 15px; right:15px;">
    @(
        Html.Kendo().Grid<GroupEnrichedDto>() // Use GroupDto here
            .Name("groupGrid")
            .Columns(columns =>
            {
                if(nautical)                
                {
                    columns.Group(g =>
                        g.Title("Plovilo").Columns(col =>
                        {
                            col.Bound(c => c.PropertyName).Title("Smještajni objekat").Width(200);
                            col.Bound(c => c.VesselDesc).Title("Plovilo").Width(250);
                            col.Bound(c => c.NauticalLegalEntity).Title("Izdavaoc").Width(200);
                        }));

                    columns.Group(g => 
                        g.Title("Boravak").Columns(col =>
                        {
                            col.Bound(c => c.Date).Title("Datum").Format("{0:dd.MM.yyyy}").Width(150).HtmlAttributes(new { style = "text-align:center;" });
                            col.Bound(c => c.CheckIn).Title("Dolazak").Format("{0:dd.MM.yyyy}").Width(150).HtmlAttributes(new { style = "text-align:center;" }); ;
                            col.Bound(c => c.CheckOut).Title("Odlazak").Format("{0:dd.MM.yyyy}").Width(150).HtmlAttributes(new { style = "text-align:center;" }); ;                                                        
                        }));

                    columns.Group(g => 
                        g.Title("Boravišna taksa").Columns(col =>
                        {                            
                            col.Bound(c => c.ResTaxAmount).Title("Taksa").Width(150).Format("{0:n2}").HtmlAttributes(new { style = "text-align:right;" });
                            col.Bound(c => c.ResTaxFee).Title("Provizija").Width(150).Format("{0:n2}").HtmlAttributes(new { style = "text-align:right;" });                            
                        }));
                }
                else
                {
                    columns.Group(g => 
                        g.Title("Boravak").Columns(col =>
                        {
                            col.Bound(c => c.Date).Title("Datum").Format("{0:dd.MM.yyyy}").Width(100).HtmlAttributes(new { style = "text-align:center;" });
                            col.Bound(c => c.PropertyName).Title("Smještajni objekat").Width(200);
                            col.Bound(c => c.CheckIn).Title("Dolazak").Format("{0:dd.MM.yyyy}").Width(100).HtmlAttributes(new { style = "text-align:center;" }); ;
                            col.Bound(c => c.CheckOut).Title("Odlazak").Format("{0:dd.MM.yyyy}").Width(100).HtmlAttributes(new { style = "text-align:center;" }); ;                            
                            col.Bound(c => c.Guests).Title("Gosti").Width(500);
                        }));

                    columns.Group(g => 
                        g.Title("Boravišna taksa").Columns(col =>
                        {                            
                            col.Bound(c => c.ResTaxAmount).Title("Taksa").Width(85).Format("{0:n2}").HtmlAttributes(new { style = "text-align:right;" });
                            col.Bound(c => c.ResTaxFee).Title("Proviz").Width(85).Format("{0:n2}").HtmlAttributes(new { style = "text-align:right;" });                            
                        }));
                }

                //col.Bound(c => c.PropertyName).Title("Smještajni objekat").Width(200);
                
            })
            .Pageable(p => p.Refresh(true))
            .Sortable()
            .Selectable()
            .Scrollable()
            .Filterable()
            .HtmlAttributes(new { style = "height:100%;" })
            .DataSource(ds => ds
            .Ajax()
            .PageSize(20)
            .Model(m =>
            {
                m.Id(g => g.Id);
                m.Field(g => g.Id);
                m.Field(g => g.Date);
                m.Field(g => g.PropertyName);
                m.Field(g => g.CheckIn);
                m.Field(g => g.CheckOut);
                m.Field(g => g.Email);
                m.Field(g => g.Guests);
                m.Field(g => g.ResTaxAmount);
            })
            .Read(read => read.Action("Read", "Group", new { nautical = ViewBag.Nautical }))
        )
    )
</div>


@(Html.Kendo().Window().Name("wndNewGroup")
    .Title("Nova prijava")
    .Visible(false)
    .Modal(true)
    .Draggable(false)
    .Width(450)
    .Height(nautical ? 700 : 575)
    .HtmlAttributes(new { style = "padding:40px;" })
    .Content(@<text>
        <div id="newGroupForm">

        <label for="propertyDropdown"><b>Izaberite smještajni objekat:</b></label>
        @(Html.Kendo().MultiColumnComboBox()
            .Name("PropertyId")
            .Placeholder("Izaberite objekat")
            .DataTextField("Name")
            .DataValueField("Id")
            .Enable(true)
            .Columns(columns =>
            {
                columns.Add().Field("Name").Title("Naziv").Width("200px");
                columns.Add().Field("Address").Title("Adresa").Width("250px");
                columns.Add().Field("LegalEntity").Title("Vlasnik").Width("200px");
            })
            .HtmlAttributes(new { id = "PropertyId", style = "width:100%;", autocomplete = "off", autocorrect = "off", autocapitalize = "off", spellcheck = "false" })
            .DropDownWidth("400px")
            .Messages(m => m.NoData("Nema podataka").Clear("Poništi"))
            .Filter("contains").FilterFields(new string[] { "Name" })
            .AutoBind(false)
            .MinLength(3)
            //.Events(e => e.Change("propertyChanged"))
            //.ValuePrimitive(true)
            //.Value(dto.PropertyId.ToString())
            //.Text(dto.PropertyName)
            .DataSource(source => { source.Read(read => { read.Action("ReadAdmin", "Property"); }).ServerFiltering(true); })
        )
        <br /><br />

        @if(nautical)
        {
            <label for="vesselDropdown"><b>Izaberite plovni objekat:</b></label>
            @(Html.Kendo().MultiColumnComboBox()
                .Name("VesselId")
                .Placeholder("Izaberite plovni objekat")
                .DataTextField("Name")
                .DataValueField("Id")
                .Enable(true)
                .Columns(columns =>
                {
                    columns.Add().Field("Name").Title("Naziv").Width("200px");
                    columns.Add().Field("Registration").Title("Registracija").Width("250px");                
                })
                .HtmlAttributes(new { id = "VesselId", style = "width:100%;", autocomplete = "off", autocorrect = "off", autocapitalize = "off", spellcheck = "false" })
                .DropDownWidth("400px")
                .Messages(m => m.NoData("Nema podataka").Clear("Poništi"))
                .Filter("contains").FilterFields(new string[] { "Name" })
                .AutoBind(false)
                .MinLength(1)      
                .Events(e => e.Change("vesselChanged"))
                .DataSource(source => { source.Read(read => { read.Action("ReadAdmin", "Vessel"); }).ServerFiltering(true); })
            )
            <br /><br />

            <label for="legalEntityDropdown"><b>Izaberite izdavaoca:</b></label>
            @(Html.Kendo().MultiColumnComboBox()
                .Name("NauticalLegalEntityId")
                .Placeholder("Izaberite izdavaoca")
                .DataTextField("Name")
                .DataValueField("Id")
                .Enable(true)
                .Columns(columns =>
                {
                    columns.Add().Field("Name").Title("Naziv").Width("200px");
                    columns.Add().Field("Address").Title("Adresa").Width("250px");
                })
                .HtmlAttributes(new { id = "NauticalLegalEntityId", style = "width:100%;", autocomplete = "off", autocorrect = "off", autocapitalize = "off", spellcheck = "false" })
                .DropDownWidth("400px")
                .Messages(m => m.NoData("Nema podataka").Clear("Poništi"))
                .Filter("contains").FilterFields(new string[] { "Name" })
                .AutoBind(false)
                .MinLength(1)
                .Events(e => e.Change("nauticalLeChanged"))
                .DataSource(source => { source.Read(read => { read.Action("ReadAdmin", "LegalEntity"); }).ServerFiltering(true); })
            )
            <br /><br />
        }

        <label for="checkInDate"><b>Očekivani datum dolaska:</b></label>
        @(Html.Kendo().DatePicker()
                .Name("checkInDate")
                .HtmlAttributes(new { style = "width:100%" })
                .Value(DateTime.Now) // Set a default value, or use any other default logic
            )
        <br /><br />

        <label for="checkOutDate"><b>Očekivani datum odlaska:</b></label>
            @(Html.Kendo().DatePicker()
            .Name("checkOutDate")
            .HtmlAttributes(new { style = "width:100%;" })
            .Value(DateTime.Now.AddDays(1)) // Set a default value, or use any other default logic
            )
        <br /><br />
            <label for="email">E-mail:</label>
            @(Html.Kendo().TextBox()
            .Name("email")
            .HtmlAttributes(new { style = "width:100%;" })
            )

        <br /><br />

        @if(User.IsInRole("TouristOrg"))
        {
            <label for="resTaxPaymentType"><b>Naplata takse:</b></label>
            @(Html.Kendo().DropDownList()
                .Name("ResTaxPaymentTypeId")
                .BindTo(ViewBag.ResTaxPaymentTypes as SelectList)
                .HtmlAttributes(new { id = "ResTaxPaymentTypeId", style = "width:100%" })                
            )
        }
        

        <br /><br /><br />

            <div style="display: flex; flex-direction: column; align-items: center;">
                @(Html.Kendo().Button().Name("btnSubmitNewGroup")
                    .HtmlAttributes(new { type = "button", onclick = "submitNewGroup()", style = "height:95px; width:95px; margin-right:10px; cursor:pointer;" })
                    .Content(@"<div style='width:100%;height:100%;text-align:center; align-items:center;'>
                        <img style='width:50px;height:50px;text-align:center;display:block;margin-left:auto;margin-right:auto;' src='/Content/Icons/user_group_new.png'/>
                        <div style='font-weight:bold;display:block;position:relative;top:5px;line-height:110%;font-size:90%'>NOVA PRIJAVA<br/>GOSTIJU<div>
                    </div>"))
            </div>

@*             <div style="display: flex; flex-direction: column; align-items: center;">
                @(Html.Kendo().Button().Name("btnSubmitNewGroup")
                    .Content("<img style='width:52px;height:52px;text-align:center; position:relative; top:-3px;' src='/Content/Icons/user_group_new.png'></img>")
                    .HtmlAttributes(new { type="button", style = "width:80px; height:80px; border-radius:50%; margin-top: 10px;", onclick = "submitNewGroup()" })
                    )
                <div style="margin-top:3px;"><b>Nova prijava</b></div>
            </div> *@

        </div>
    </text>)
)


@Html.Kendo().Window().Name("wndSendLink").Title("Slanje linka").Visible(false).Modal(true).Draggable(false).Width(400).Height(450).HtmlAttributes(new { style = "padding:40px;" })