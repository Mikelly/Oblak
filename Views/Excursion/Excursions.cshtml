@using Oblak.Models.Api;
@using Oblak.Models.EFI;

@{
    ViewBag.Title = "Izleti";
    Layout = "~/Views/Shared/_LayoutINV.cshtml";
}

<style type="text/css">

    .k-input-loading-icon {
        padding: 0px !important;
    }

</style>

<script type="text/javascript">
    $(document).ready(function () {

    });

    function onCountryChange(e) {
        var grid = $("#ExcursionsGrid").data("kendoGrid");
        var val = $("#CountryId").val();        
        var dataItem = grid.dataItem(grid.select());
        dataItem.CountryId = val;
        dataItem.dirty = true;
        grid.trigger("change");
    }

    function onAgencyChange(e) {
        var grid = $("#ExcursionsGrid").data("kendoGrid");
        var val = $("#AgencyId").val();
        var dataItem = grid.dataItem(grid.select());
        dataItem.AgencyId = val;
        dataItem.dirty = true;
        grid.trigger("change");
    }

    // function agencyFilter(element) {
    //     let combo;
    //     combo = element.kendoComboBox({
    //         placeholder: "Izaberite agenciju",
    //         dataTextField: "Name",
    //         dataValueField: "Id",   
    //         filter: "contains",
    //         suggest: true,
    //         autoBind: false,
    //         minLength: 2,
    //         dataSource: {
    //             serverFiltering: true,
    //             transport: {
    //                 read: {
    //                     url: "/agency-read-admin",
    //                     dataType: "json"
    //                 }
    //             }
    //         },
    //         filtering: function(e) {
    //             const filterValue = e.filter?.value || "";
    //             e.sender.dataSource.transport.options.read.data = {
    //                 text: filterValue
    //             };
    //         },
    //         change: function(e) { 
    //         }
    //     }).data("kendoComboBox");

    //     combo.dataSource.read().then(function() {
    //         const selectedValue = combo.value();
    //         if (selectedValue) {

    //             combo.value(selectedValue);
    //             const selectedItem = combo.dataSource.get(selectedValue);
    //             if (selectedItem) {
    //                 combo.text(selectedItem.Name); 
    //             }
    //         }
    //     }); 
    // }

    function agencyFilter(element) {
        entityComboBoxFilter(element, {
            url: "/agency-read-admin",
            placeholder: "Izaberite agenciju...",
            valueField: "Id",
            textField: "Name",
            onChange: function(e) {
                //console.log("item:", e.sender.dataItem());
            }
        });
    }
    function countryFilter(element) {
        entityComboBoxFilter(element, {
            url: "/countries-get-items",
            placeholder: "Izaberite nacionalnost...",
            valueField: "Id",
            textField: "CountryName",
            onChange: function(e) {
                //console.log("item:", e.sender.dataItem());
            }
        });
    }
         


</script>

<div style="position:absolute; top:25px; bottom: 15px; left: 15px; right:15px;">
    @(Html.Kendo().Grid<ExcursionDto>()
        .Name("ExcursionsGrid")
        .ToolBar(t => t.Create().Text("Novi izlet"))
        .Columns(columns =>
        {
            columns.Command(command => { 
                command.Edit().Text(" ").UpdateText(" ").CancelText(" "); 
                command.Destroy().Text(" "); 
            })
            .Width(70);

            columns.Bound(g => g.AgencyId)
            .Title("Agencija")
            .Filterable(filter => filter.UI("agencyFilter").Extra(false))
            .ClientTemplate("#= AgencyName ?? '' #")
            .EditorTemplateName("Agency")
            .EditorViewData(new { Foo = "onAgencyChange", ValueField = "Id", TextField = "Name" })
            .Width("30%"); 
            columns.Bound(g => g.Date).Title("Datum").Format("{0:dd.MM.yyyy}").EditorTemplateName("Date").Width(140).HtmlAttributes(new { style = "text-align:center;" });
            columns.Bound(g => g.VoucherNo).Title("Vaučer").Width("25%").HtmlAttributes(new { style = "text-align:left;" });
            columns.Bound(g => g.NoOfPersons).Title("Broj osoba").EditorTemplateName("Integer").Format("{0:n0}").Width(120).HtmlAttributes(new { style = "text-align:center;" });
            columns.Bound(g => g.CountryId)
            .Title("Nacionalnost")
            .Filterable(filter => filter.UI("countryFilter").Extra(false))
            .ClientTemplate("#= CountryName ?? '' #")
            .EditorTemplateName("Country")
            .EditorViewData(new { Foo = "onCountryChange", ValueField = "Id", TextField = "CountryName" })
            .Width("30%");
            columns.Bound(g => g.ExcursionTaxAmount).Title("Iznos takse").Width(150).Format("{0:n2}").HtmlAttributes(new { style = "text-align:right;" });
            columns.Bound(g => g.ExcursionTaxTotal).Title("Ukupno").Width(150).Format("{0:n2}").HtmlAttributes(new { style = "text-align:right;" });            
        })
        .Pageable(p => p.Refresh(true))
        .Sortable()
        .Selectable()
        .Scrollable()
        .Filterable()
        .HtmlAttributes(new { style = "height:100%;" })
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .DataSource(ds => ds
            .Ajax()
            .PageSize(20)
            .Model(m =>
            {
                m.Id(g => g.Id);
                m.Field(g => g.Id).Editable(false);
                m.Field(g => g.AgencyId);
                m.Field(g => g.Date);
                m.Field(g => g.VoucherNo);
                m.Field(g => g.NoOfPersons);
                m.Field(g => g.ExcursionTaxAmount).DefaultValue(1);
                m.Field(g => g.ExcursionTaxTotal).Editable(false);
            })
            .Events(e => e.Sync("genericSync").RequestEnd("genericRequestEnd"))
            .Sort(a => a.Add(b => b.Date).Descending())
            .Create(a => a.Action("Create", "Excursion", new { AgencyId = ViewBag.Agency }))
            .Read(a => a.Action("Read", "Excursion", new { AgencyId = ViewBag.Agency }))
            .Update(a => a.Action("Update", "Excursion", new { AgencyId = ViewBag.Agency }))
            .Destroy(a => a.Action("Destroy", "Excursion", new { AgencyId = ViewBag.Agency }))
        )
    )
</div>