@{ 
    var a = "reg";
    var c = "";
    var d = "block";
    if (a == "reg" && c == "inv") {
        d = "none";
    }

    bool fiscAdmin = true;
    bool fiscPartner = true;
    bool rbAdmin = true;
    bool Administrator = true;
    bool admin = fiscAdmin || Administrator || fiscPartner;

    var adm = "none";
    if (admin)
    {
        adm = "block";
    }
}

<!DOCTYPE html>
<html style="font-size:14px;">
<head>
    <title>@ViewBag.Title</title>

    <link href="https://kendo.cdn.telerik.com/themes/7.0.2/default/default-ocean-blue.css" rel="stylesheet" type="text/css" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
@*     <script src="https://unpkg.com/jszip/dist/jszip.min.js"></script> *@
    <script src="https://cdn.kendostatic.com/2024.1.130/js/kendo.all.min.js"></script>
    <script src="https://cdn.kendostatic.com/2024.1.130/js/kendo.aspnetmvc.min.js"></script>
    <script src="./kendo-ui-license.js"></script>

    <script src="//cdn.jsdelivr.net/npm/sweetalert2@10"></script>

    <link href="/fontawesome6/css/fontawesome.css" rel="stylesheet">
    <link href="/fontawesome6/css/brands.css" rel="stylesheet">
    <link href="/fontawesome6/css/solid.css" rel="stylesheet">

    <script src="@Url.Content("~/Scripts/kendo.culture.sr-Latn-ME.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo.messages.sr-Latn-ME.min.js")"></script>

@*     <link href="@Url.Content("~/Content/SiteSAP.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/menu.css")" rel="stylesheet/less" type="text/css" /> *@
    <link href="@Url.Content("~/Content/kendo.oblak.css")" rel="stylesheet" type="text/css" />
    

    <link href="https://fonts.googleapis.com/css2?family=Fira+Sans&display=swap" rel="stylesheet">    
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Display:ital,wght@0,100..900;1,100..900&family=Noto+Sans+Mono:wght@100..900&display=swap" rel="stylesheet">

    <script type="text/kendo-template" id="kendo_error_message">
        <div class="k-widget k-tooltip k-tooltip-validation field-validation-error" onclick="$(this).hide()" style="margin: 0.5em; display:block; cursor:pointer;" data-for="#=field#" data-valmsg-for="#=field#" id="#=field#_validationMessage">
            <span style="top:-1px!important" class="k-icon k-i-warning"></span>#=message#<div class="k-callout k-callout-n"></div>
        </div>
    </script>

    <script type="text/kendo-template" id="kendo_error_message_form">
        <div class="k-widget k-tooltip k-tooltip-validation field-validation-error" onclick="$(this).hide()" style="margin: 0.5em; display:block; white-space: nowrap; max-width:400px; cursor:pointer; position:sticky;" data-for="#=field#" data-valmsg-for="#=field#" id="#=field#_validationMessage">
            <span style="top:0px!important; padding-top:1px" class="k-icon k-i-warning"></span>#=message#<div class="k-callout k-callout-w"></div>
        </div>
    </script>

    <script type="text/javascript">
        kendo.culture("sr-Latn-ME");
    </script>

    <style>
        .swal2-container {
            z-index: 1000000000!important;
        }

        #wndStatus {
            overflow:hidden!important;
        }

    </style>
</head>

<body style="font-family: 'Noto Sans Display', sans-serif; font-size:0.875rem!important; position: fixed; top: 0px; left: 0px; right: 0px; bottom: 0px;">
    
    @Html.Partial("_Menu")

    <div class="grid-wrapper" id="body" style="position: fixed; top: 45px; left: 0px; right: 0px; bottom: 0px;">
        @RenderBody()
    </div>

    @(Html.Kendo().Dialog()
        .Name("mydialog")
        .Title("Title")
        .Content("<p>Content<p>")
        .Width(400).ButtonLayout("normal")
        .Modal(true).Visible(false)
        .Actions(actions => { actions.Add().Text("OK").Primary(true).Action("function(){ $('#mydialog').data('kendoDialog').close(); }"); })
    )

    @Html.Kendo().Window().Name("wndStatus").Title("Pregled prometa").Visible(false).Modal(true).Draggable(true).Width(900).Height(700).HtmlAttributes(new { style = "padding:10px; padding-right:0px; overflow:hidden!important;" })

    @Html.Kendo().Window().Name("wndDiscount").Title("Popust").Visible(false).Modal(true).Draggable(true).Width(228).Height(320).HtmlAttributes(new { style = "padding:10px; padding-right:0px;" })

    @Html.Kendo().Window().Name("wndDeposit").Title("Unos depozita").Visible(false).Modal(true).Draggable(true).Width(228).Height(320).HtmlAttributes(new { style = "padding:10px; padding-right:0px;" })
</body>
</html>

<script type="text/javascript">

    $(document).ajaxComplete(function (event, xhr, settings) {
        if (xhr.status == 403) {
            $.blockUI({ title: 'Obavještenje', message: '<h3>Nemate prava da izvršite ovu akciju.</h3>', timeout: 1500 });
        }
        $('input').attr('autocomplete', 'off');
        idleTime = 0;
    });

    function dtchng2() {
        var inputValue = datePicker.element.val().trim(); // Get and trim the user input
        var currentYear = new Date().getFullYear();

        // Allow empty input as a valid case
        if (inputValue === "") {
            datePicker.value(null); // Clear the value
            return;
        }

        // Regex to match day, month, and optional year
        var regex = /^(\d{1,2})\.(\d{1,2})(?:\.(\d{2}|\d{4})?)?\.?$/;
        var match = inputValue.match(regex);

        if (match) {
            var day = parseInt(match[1], 10);
            var month = parseInt(match[2], 10);
            var year = match[3] ? parseInt(match[3], 10) : currentYear;

            // Handle two-digit years
            if (year < 100) {
                year += year < 50 ? 2000 : 1900;
            }

            var newDate = new Date(year, month - 1, day);

            if (
                newDate.getDate() === day &&
                newDate.getMonth() === month - 1 &&
                newDate.getFullYear() === year
            ) {
                datePicker.value(newDate); // Set valid value
            } else {
                datePicker.value(null); // Reset to null for invalid date
            }
        } else {
            // Invalid input, clear the value but trigger change
            datePicker.value(null); // Clear the DatePicker value
        }
    }


    function dtchng (e) {

        var datePickerElement;
        if (e && e.sender) {
            datePickerElement = e.sender.element; // Get the DatePicker element from Kendo event
        } else {
            datePickerElement = $(e); // Assume e is a DOM element or jQuery selector
        }

        var datePicker = $(datePickerElement).data("kendoDatePicker");

        if (!datePickerElement.data("alertShown")) {
            datePickerElement.data("alertShown", false);
        }

        var alertShown = datePickerElement.data("alertShown");

        //var datePicker = this;
        var inputValue = datePicker.element.val().trim(); // Get and trim the user input

        if (inputValue === "") {
            datePicker.value(null); // Clear the DatePicker value
            datePicker.trigger("change"); // Trigger the change event
            datePickerElement.data("alertShown", false); // Reset the alert flag
        }
        else {
            var currentYear = new Date().getFullYear();

            // Regex to match day, month, and optional year (handles single/double digits)
            //var regex = /^(\d{1,2})\.(\d{1,2})(?:\.(\d{2}|\d{4})?)?\.?$/;
            var regex = /^(\d{1,2})[.,](\d{1,2})(?:[.,](\d{2}|\d{4}))?[.,]?$/;

            var match = inputValue.match(regex);

            if (match) {
                var day = parseInt(match[1], 10); // Parse day (e.g., 1 or 01)
                var month = parseInt(match[2], 10); // Parse month (e.g., 8 or 08)
                var year = match[3] ? parseInt(match[3], 10) : currentYear; // Default year to currentYear

                // Handle two-digit years (e.g., "24" -> 2024)
                if (year < 100) {
                    year += year < 50 ? 2000 : 1900; // Customize as needed
                }

                // Create a new date with the parsed values
                var newDate = new Date(year, month - 1, day);

                debugger;

                // Validate the date to ensure it exists
                if (
                    newDate.getDate() === day &&
                    newDate.getMonth() === month - 1 &&
                    newDate.getFullYear() === year
                ) {
                    // Update the DatePicker's value with a formatted date
                    datePicker.value(newDate);
                    datePickerElement.data("alertShown", false); // Reset the alert flag
                }
                else if (!alertShown) {
                    alert("Neispravan unos datum. Provjerite unesene podatke.");
                    datePickerElement.data("alertShown", true); // Set the alert flag for this instance
                }
            } 
            else if (!alertShown) {
                alert("Neispravan unos datum. Provjerite unesene podatke.");
                datePickerElement.data("alertShown", true); // Set the alert flag for this instance
            }

            datePicker.element.off("blur").on("blur", function () {
                var inputValue = datePicker.element.val().trim();

                if (inputValue !== "" && !datePicker.value()) {
                    // Trigger the change event if the value is invalid
                    datePicker.trigger("change");
                }
            });
        }
    }

    function formError(args) {
        if (args.Errors) {

            var gridElement = $('#gedit');
            validationMessageTemplate = kendo.template($("#kendo_error_message_form").html());

            map = new Object();

            if (args.Errors.MODEL) {
                $('#mydialog').data('kendoDialog').title('Info').content(args.errors.MODEL.errors).open();
            }

            var top = $(gridElement).offset().top;
            var bot = top + $(gridElement).height();

            $.each(args.Errors, function (key, value) {
                debugger;
                if (value.errors) {
                    gridElement.find("[data-valmsg-for=" + key + "],[data-val-msg-for=" + key + "]")
                        .replaceWith(validationMessageTemplate({ field: key, message: value.errors[0] }));
                    gridElement.find("input[name=" + key + "]").focus();
                    if ($(gridElement).hasClass('k-grid-edit-row') == false) {
                        var i = $('#' + key);
                        var wdgt = i.parentsUntil(gridElement, '.k-widget');
                        if (wdgt.length == 1) i = wdgt;
                        var pos = i.offset();
                        var pad = Number.parseInt(i.css('padding-left'));
                        var tt = gridElement.find('#' + key + '_validationMessage');
                        tt.css('position', 'fixed');
                        pos.left = pos.left + 12 + i.width() + pad;
                        pos.top = pos.top + i.outerHeight() / 2 - tt.outerHeight() / 2;
                        tt.offset(pos);
                        setTimeout(
                            function () {
                                pos.top = pos.top + i.outerHeight() / 2 - tt.outerHeight() / 2;
                                tt.offset(pos);
                                if (pos.top > bot) $(tt).replaceWith('<div data-forr=' + key + '><div>');
                            }, 0);
                        map[key] = tt;
                    }
                }
            });

            for (var error in args.Errors) {
                showError(gridElement, error, args.Errors[error].errors);
            }
        }
    }

    function showError(container, name, errors) {

        var txt = container.find('#' + name);

        if (txt != null) {
            txt.css('border-color', 'red');
            txt.attr('title', errors[0]);
        }

        var dd = txt.prev('.k-dropdown-wrap');
        if (dd != undefined) {
            dd.css('border-color', 'red');
            dd.attr('title', errors[0]);
        }

        var dd = txt.closest('.k-picker-wrap,.k-numeric-wrap');
        if (dd != undefined) {
            dd.css('border-color', 'red');
            dd.attr('title', errors[0]);
        }
    }

    function genericSync(e) {
        debugger;
        if (e.sender.shouldSync) this.read();
    }

    function genericRequestEnd(e) {
        var response = e.response;
        var type = e.type;
        var grid = e.sender;

        if (e.type == "update" || e.type == "create") {
            var errors = e.response.Errors;
            if (errors != undefined) grid.shouldSync = false;
            else grid.shouldSync = true;
        }

        if (response && response.Errors) { 
            alert(response.Errors); 
            grid.shouldSync = false;
        }
        debugger; 
    }
     
    //funkcija za filter u kendo gridu za kolone koje imaju combobox sa EditorTemplate-om
    function entityComboBoxFilter(element, options) {
        const combo = element.kendoComboBox({
            placeholder: options.placeholder || "Izaberite...",
            dataTextField: options.textField || "Name",
            dataValueField: options.valueField || "Id",
            filter: "contains",
            suggest: true,
            autoBind: false,
            minLength: 2,
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: options.url,
                        dataType: "json"
                    }
                }
            },
            filtering: function(e) {
                const filterValue = e.filter?.value || "";
                e.sender.dataSource.transport.options.read.data = {
                    text: filterValue
                };
            },
            change: function(e) { 
                if (typeof options.onChange === "function") {
                    options.onChange(e);
                }
            }
        }).data("kendoComboBox");
         
        combo.dataSource.read().then(function () {
            const selectedValue = combo.value();
            if (selectedValue) {
                combo.value(selectedValue);
                const selectedItem = combo.dataSource.get(selectedValue);
                if (selectedItem) {
                    combo.text(selectedItem[options.textField || "Name"]);
                }
            }
        });
    }


</script>
 