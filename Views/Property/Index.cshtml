@using Oblak.Models.Api;
@using Oblak.Models.EFI;

@{
    var sl = ViewBag.MunicipalityCodeList as SelectList;
    var tl = ViewBag.TypeCodeList as SelectList;
    var ssl = ViewBag.StatusList as SelectList; 
    var le = (int?)ViewBag.LegalEntity;
    var cntr = (string)ViewBag.Country ?? "MNE";
    var partial = ViewBag.Partial;
    if (partial == false)
    {
        ViewBag.Title = "Smještajni objekti";
        Layout = "~/Views/Shared/_LayoutINV.cshtml";
    }
}

<style> 
    #btnExportZip.loading {
        position: relative;
        pointer-events: none;
        opacity: 0.7;
    }

        #btnExportZip.loading::after {
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 3px solid #fff;
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }
    @@keyframes spin { to { transform: rotate(360deg);  }  }
</style>

<script type="text/javascript"> 
     

    function loadProperties() {
        $.ajax({
            url: `/Property/FetchPropertiesExternal?legalEntity=${le}`,
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                if (data.success) {
                    Swal.fire({icon: 'success', title: 'Smještajni objekti su uspješno preuzeti.', confirmButtonText: 'U redu' });
                    var grid = $("#propertiesGrid").data("kendoGrid");
                    grid.dataSource.read();
                } else {
                    Swal.fire({ icon: 'error', title: 'Došlo je do greške prilikom preuzimanja smještajnih objekata.', confirmButtonText: 'U redu' });
                }
            },
            error: function (error) {
                Swal.fire({ icon: 'error', title: 'Došlo je do greške prilikom preuzimanja smještajnih objekata.', confirmButtonText: 'U redu' });
            }
        });
    }


    function newProperty(e) {
        var grid = $("#propertiesGrid").data("kendoGrid");
        grid.addRow();
    }


    function fiscal() {

        var grid = $('#propertiesGrid').data('kendoGrid');
        var item = grid.dataItem(grid.select());

        if (item == null) Swal.fire({ icon: 'error', title: 'Morate odabrati smještajni objekat', confirmButtonText: `U redu` });

        var prop = item.Id;

        $.ajax({
            url: `/fiscal-enu?property=${prop}`,
            type: 'GET',
            success: function (data, status, xhr) {
                var wnd = $("#wndFiscal").data("kendoWindow");
                wnd.content(data);
                wnd.center().open();
            }
        });
    }

    function setFiscal() {

        $.ajax({
            url: `/fiscal-enu`,
            type: 'POST',
            data: $('#frmFiscal').serialize(),
            success: function (data, status, xhr) {
                if (data.error != "") {
                    Swal.fire({ icon: 'error', title: data.error, confirmButtonText: `U redu` });
                }
                else {
                    $("#wndFiscal").data("kendoWindow").close();
                }
            }
        });
    }

    function propertyEdit(e) {
        //var container = e.container;
        var model = e.model;
        

        var municipalityDropDown = $("[name='MunicipalityId']").data("kendoDropDownList");
        if (municipalityDropDown) { 
            municipalityDropDown.value(model.MunicipalityId);

            municipalityDropDown.trigger("change");
        }
         
        setTimeout(function() {
            var placeDropDown = $("[name='Place']").data("kendoDropDownList");
            if (placeDropDown) {
                placeDropDown.dataSource.fetch().then(function () {
            placeDropDown.value(model.Place);
        });
            }
        }, 300);
    }

    function cascadePlace(e) {
        debugger;
    }

    function opstinaChanged(e) {

        var placeDropDown = $("[name='Place']").data("kendoDropDownList");
        if (placeDropDown) {
            placeDropDown.dataSource.read();
            placeDropDown.select(0);
        }
    }

    function filterMjesta() {

            var municipalityDropDown = $("[name='MunicipalityId']").data("kendoDropDownList");
            if (municipalityDropDown) {
            var selectedItem = municipalityDropDown.dataItem(municipalityDropDown.select());
            return {
                opstina: selectedItem ? selectedItem.Value : null
            };
        }

        return { opstina: null };
    }


    var isDownloading = false;
    var exportWindow = null; 

    function openExportWindow() {
        var grid = $('#propertiesGrid').data('kendoGrid');
        var item = grid.dataItem(grid.select());

        if (!item) {
            Swal.fire({
                icon: 'error',
                title: 'Morate odabrati smještajni objekat',
                confirmButtonText: 'U redu'
            });
            return;
        }

        exportWindow = $('#wndExportInvoices').data('kendoWindow');

        exportWindow
            .refresh({
                url: '/openExportInvoices',
                data: { 
                    legalEntityId: item.LegalEntityId, 
                    propertyId: item.Id
                }
            })
            .center()
            .open(); 
    }


    // async function exportInvoicesZipFromWindow() {
    //   var btn = $('#btnDownloadInvoices');
    //   btn.prop('disabled', true);

    //   // čitanje vrijednosti iz forme u prozoru
    //   var enu     = $('#ddlEnu').data('kendoDropDownList').value();
    //   var datumOd = $('#dtFrom').data('kendoDatePicker').value();
    //   var datumDo = $('#dtTo').data('kendoDatePicker').value();

    //   if (!enu || !datumOd || !datumDo) {
    //     Swal.fire({
    //       icon: 'error',
    //       title: 'Popunite sve podatke (ENU i oba datuma).',
    //       confirmButtonText: 'U redu'
    //     });
    //     btn.prop('disabled', false);
    //     return;
    //   }

    //   // format dd.MM.yyyy bez tačke na kraju
    //   var odStr = kendo.toString(datumOd, 'dd.MM.yyyy');
    //   var doStr = kendo.toString(datumDo,   'dd.MM.yyyy');

    //   var url = `/api/exportInvoicesZip?` +
    //             `enu=${encodeURIComponent(enu)}` +
    //             `&datumod=${encodeURIComponent(odStr)}` +
    //             `&datumdo=${encodeURIComponent(doStr)}`;

    //   try {
    //     var response = await fetch(url, {
    //       method: 'GET',
    //       credentials: 'same-origin'
    //     });

    //     var contentType = response.headers.get('content-type') || '';
    //     if (!response.ok || !contentType.includes('application/zip')) {
    //       var err = await response.json();
    //       throw err;
    //     }

    //     var blob = await response.blob();
    //     var downloadUrl = URL.createObjectURL(blob);
    //     var filename = `Fakture_${enu}_${odStr.replace(/\./g,'')}_${doStr.replace(/\./g,'')}.zip`;

    //     var a = document.createElement('a');
    //     a.href = downloadUrl;
    //     a.download = filename;
    //     document.body.appendChild(a);
    //     a.click();
    //     a.remove();
    //     URL.revokeObjectURL(downloadUrl);
    //   }
    //   catch (err) {
    //     Swal.fire({
    //       icon: 'error',
    //       title: err.error || 'Greška pri preuzimanju ZIP-a',
    //       text: err.info || ''
    //     });
    //   }
    //   finally {
    //     btn.prop('disabled', false);
    //   }
    // } 
          
    function setExportWindow(win) {
    exportWindow = win;

        // Onemogući zatvaranje ESC tipkom
        exportWindow.options.modal = true;
        exportWindow.wrapper.attr("tabindex", -1).off("keydown").on("keydown", function (e) {
            if (isDownloading && e.key === "Escape") {
                e.preventDefault();
                e.stopPropagation();
            }
        });
    }

    async function exportInvoicesZipFromWindow() {
    if (isDownloading) return;

    var btn = $('#btnDownloadInvoices');
    var enu     = $('#ddlEnu').data('kendoDropDownList')?.value();
    var datumOd = $('#dtFrom').data('kendoDatePicker')?.value();
    var datumDo = $('#dtTo').data('kendoDatePicker')?.value();

    // Validacija praznih polja
    if (!enu || !datumOd || !datumDo) {
        await Swal.fire({
            icon: 'error',
            title: 'Popunite sve podatke (ENU i oba datuma).',
            confirmButtonText: 'U redu'
        });
        return;
    }

    // Ograničenje od 400 dana
    var daysDiff = Math.ceil((datumDo - datumOd) / (1000 * 60 * 60 * 24));
    if (daysDiff > 400) {
        await Swal.fire({
            icon: 'warning',
            title: 'Maksimalni opseg je 400 dana.',
            confirmButtonText: 'U redu'
        });
        return;
    }

    // Potvrda korisniku
    const confirm = await Swal.fire({
        title: 'Da li ste sigurni?',
        text: 'Ova akcija može zahtijevati vrijeme čekanja tokom kojeg se generišu računi. Molimo Vas za strpljenje.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Da, nastavi',
        cancelButtonText: 'Odustani'
    });

    if (!confirm.isConfirmed) return;

    // Disable UI
    isDownloading = true;
    btn.prop('disabled', true).addClass('k-state-disabled');
    btn.text("Generisanje u toku...");

    // Sakrij X i spreči zatvaranje
    if (exportWindow) {
        exportWindow.wrapper.find(".k-window-actions").hide();
        exportWindow.unbind("close").bind("close", function(e) {
            if (isDownloading) e.preventDefault();
        });
    }

    // Format datuma
    var odStr = kendo.toString(datumOd, 'dd.MM.yyyy');
    var doStr = kendo.toString(datumDo, 'dd.MM.yyyy');

    var url = `/api/exportInvoicesZip?` +
        `enu=${encodeURIComponent(enu)}` +
        `&datumod=${encodeURIComponent(odStr)}` +
        `&datumdo=${encodeURIComponent(doStr)}`;

    try {
        var response = await fetch(url, { method: 'GET', credentials: 'same-origin' });

        var contentType = response.headers.get('content-type') || '';
        if (!response.ok || !contentType.includes('application/zip')) {
            var err = await response.json();
            throw err;
        }

        var blob = await response.blob();
        var downloadUrl = URL.createObjectURL(blob);
        var filename = `Fakture_${enu}_${odStr.replace(/\./g,'')}_${doStr.replace(/\./g,'')}.zip`;

        var a = document.createElement('a');
        a.href = downloadUrl;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(downloadUrl);

        // Zatvaranje prozora nakon uspeha
        if (exportWindow) exportWindow.close();
    }
    catch (err) {
        await Swal.fire({
            icon: 'error',
            title: err.error || 'Upozorenje',
            text: err.info || ''
        });
        if (exportWindow) exportWindow.close();
    }
    finally {
        isDownloading = false;
        btn.prop('disabled', false).removeClass('k-state-disabled');
        btn.text("Preuzmi račune");

        if (exportWindow) {
            exportWindow.wrapper.find(".k-window-actions").show();
            exportWindow.unbind("close");
        }
    }
}

</script>

<div style="position:absolute; top:@(partial ? 15 : 25)px; bottom: 15px; left: 15px; right:15px;">
    @(Html.Kendo().Button().Name("btnLoadProperties")
        .HtmlAttributes(new { type = "button", onclick = "loadProperties()", style = "height:95px; width:95px; margin-right:10px; cursor:pointer;" })
        .Content(@"<div style='width:100%;height:100%;text-align:center; align-items:center;'>
    <img style='width:50px;height:50px;text-align:center;display:block;margin-left:auto;margin-right:auto;' src='/Content/Icons/hotel.png'/>
    <div style='font-weight:bold;display:block;position:relative;top:5px;line-height:110%;font-size:90%'>UČITAJ<br/>OBJEKTE<div>
    </div>"))

    @(Html.Kendo().Button().Name("btnNewProperty")
        .HtmlAttributes(new { type = "button", onclick = "newProperty()", style = "height:95px; width:95px; margin-right:10px; cursor:pointer;" })
        .Content(@"<div style='width:100%;height:100%;text-align:center; align-items:center;'>
    <img style='width:50px;height:50px;text-align:center;display:block;margin-left:auto;margin-right:auto;' src='/Content/Icons/building.png'/>
    <div style='font-weight:bold;display:block;position:relative;top:5px;line-height:110%;font-size:90%'>NOVI<br/>OBJEKAT<div>
    </div>"))

    @(Html.Kendo().Button().Name("btnFiscal")
        .HtmlAttributes(new { type = "button", onclick = "fiscal()", style = "height:95px; width:95px; margin-right:10px; cursor:pointer;" })
        .Content(@"<div style='width:100%;height:100%;text-align:center; align-items:center;'>
    <img style='width:48px;height:48px;text-align:center;display:block;margin-left:auto;margin-right:auto;margin-top:2px;' src='/Content/Icons/cash_register.png'/>
    <div style='font-weight:bold;display:block;position:relative;top:5px;line-height:110%;font-size:90%'>FISKALNI<br/>PODACI<div>
    </div>"))

    @(Html.Kendo().Button()
        .Name("btnExportZip")
        .HtmlAttributes(new {
            id      = "btnExportZip",
            type    = "button",
            style   = "height:95px; width:95px; margin-right:10px; cursor:pointer;",
            onclick = "openExportWindow()"
        })
        .Content(@"
          <div style='width:100%;height:100%;text-align:center;'>
            <img src='/Content/Icons/zip.png' style='width:48px;height:48px;display:block;margin:0 auto 2px;'/>
            <div style='font-weight: bold;  display: block; position: relative; top: 5px; line-height: 110%; font-size: 90%;'>
              PREUZMI<br/>RAČUNE
            </div>
          </div>"
        )
    )
     
</div>

<div style="position:absolute; top:@(partial ? 120 : 130)px; bottom: 15px; left: 15px; right:15px;">
    @(Html.Kendo().Grid<PropertyEnrichedDto>()
        .Name("propertiesGrid")
        .Columns(columns =>
        {
            columns.Command(command =>
            {
                command.Edit().Text(" ").UpdateText(" ").CancelText(" ");
                command.Destroy().Text(" ");
            })
            .Width(70);

            columns.Bound(g => g.Id).Title("ID").Width(110).ClientTemplate("#= Id #").HtmlAttributes(new { style = "pointer-events:none;" });
            columns.Bound(g => g.ExternalId).Title("Šifra").Width(110);
            columns.Bound(g => g.Name).Title("Naziv").Width(250); 
            columns.ForeignKey(g => g.MunicipalityId, (SelectList)ViewBag.Opstine, "Value", "Text").Title("Opština").Width(200).EditorTemplateName("Opstina");
            columns.ForeignKey(g => g.Place, (SelectList)ViewBag.Places, "Value", "Text").Title("Mjesto").Width(200).EditorTemplateName("Mjesto");
            columns.Bound(g => g.Address).Title("Adresa").Width(100);
            columns.Bound(g => g.RegNumber).Title("Broj registr").Width(150);
            columns.Bound(g => g.RegDate).Title("Datum registr").Format("{0:dd.MM.yyyy}").EditorTemplateName("Date").Width(150);
            columns.ForeignKey(g => g.Type, tl).Title("Vrsta").Width(250);
            columns.ForeignKey(g => g.Status, ssl).Title("Status").Width(110);
        })
        .Pageable(p => p.Refresh(true))
        .Sortable()
        .Selectable()
        .Scrollable()
        .Filterable()
        .Events(e => e.Edit("propertyEdit"))
        .HtmlAttributes(new { style = "height:100%;" })
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .DataSource(ds => ds
        .Ajax()
        .PageSize(20)
        .Model(m =>
        {
            m.Id(g => g.Id);
            m.Field(g => g.Id).Editable(false);
            m.Field(g => g.ExternalId);
            m.Field(g => g.RegNumber);
            m.Field(g => g.RegDate);
            m.Field(g => g.Name);
           //m.Field(g => g.PropertyName);
            m.Field(g => g.Address);
            m.Field(g => g.MunicipalityId);
            m.Field(g => g.Place);
            //m.Field(g => g.PaymentType);
            //m.Field(g => g.Price);
            //m.Field(g => g.Capacity);
            //m.Field(g => g.ResidenceTax);
            //m.Field(g => g.ResidenceTaxYN);
            m.Field(g => g.Status).DefaultValue("A");
        })
        .Create(a => a.Action("Create", "Property", new { legalEntity = le }))
        .Read(a => a.Action("Read", "Property", new { legalEntity = le }))
        .Update(a => a.Action("Update", "Property", new { legalEntity = le }))
        .Destroy(a => a.Action("Destroy", "Property", new { legalEntity = le }))
        )
        )
</div>


@(Html.Kendo().Window().Name("wndFiscal")
    .Title("Fiskalni podaci")
    .Visible(false)
    .Modal(true)
    .Draggable(false)
    .Width(400)
    .Height(600)
    .HtmlAttributes(new { style = "padding:20px; padding-bottom:10px; font-size:14px;" })
)

@(Html.Kendo().Window().Name("wndExportInvoices")
    .Title("Preuzimanje računa")
    .Visible(false)
    .Modal(true)
    .Draggable(false)
    .Width(400)
    .Height(450)
    .HtmlAttributes(new { style = "padding:20px; padding-bottom:10px; font-size:14px;" })
)